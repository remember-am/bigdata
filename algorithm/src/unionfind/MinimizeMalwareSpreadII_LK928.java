package unionfind;

/*
928. 尽量减少恶意软件的传播 II
给定一个由 n 个节点组成的网络，用 n x n 个邻接矩阵 graph 表示。在节点网络中，只有当 graph[i][j] = 1 时，
节点 i 能够直接连接到另一个节点 j。
一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，
那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
我们可以从 initial 中 删除一个节点，并完全移除该节点以及从该节点到任何其他节点的任何连接。
请返回移除后能够使 M(initial) 最小化的节点。如果有多个节点满足条件，返回索引 最小的节点 。

提示：
n == graph.length
n == graph[i].length
2 <= n <= 300
graph[i][j] 是 0 或 1
graph[i][j] == graph[j][i]
graph[i][i] == 1
1 <= initial.length < n
0 <= initial[i] <= n - 1
 initial 中每个整数都不同
 */

import java.util.Arrays;

public class MinimizeMalwareSpreadII_LK928 {

    static int MAXN = 301;

    static int[] father = new int[MAXN];

    // 用于快速查询哪些点是病毒
    static boolean[] virus = new boolean[MAXN];

    // 用于记录集合感染情况，-1表示未感染，-2表示被多个感染点连接，大于等于0的值x，则表示被x号感染点连接
    static int[] infect = new int[MAXN];

    // 记录普通点集合的个数
    static int[] size = new int[MAXN];

    // 记录每个满足条件的感染点能拯救多少其它普通点
    static int[] cnt = new int[MAXN];

    public static void init(int n, int[] initial) {
        for (int i = 0; i < n; i++) {
            father[i] = i;
            // 初始时每个元素单独一个集合，并且都为受感染
            infect[i] = -1;
            size[i] = 1;
            cnt[i] = 0;
            virus[i] = false;
        }
        for (int i : initial) {
            virus[i] = true;
        }
    }

    public static int find(int i) {
        if (i != father[i]) {
            father[i] = find(father[i]);
        }
        return father[i];
    }

    public static void union(int x, int y) {
        int fx = find(x);
        int fy = find(y);
        if (fx != fy) {
            father[fx] = fy;
            size[fy] += size[fx];
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        init(n, initial);
        // 普通点之间如果有连接并且都不是病毒就做合并
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1 && !virus[i] && !virus[j]) {
                    union(i, j);
                }
            }
        }
        // 查看和感染点直接相连的普通点
        for (int sick : initial) {
            for (int i = 0, fn; i < n; i++) {
                // 枚举连接，如果当前是个普通点不是病毒，并且和病毒点有连接，则可以给该普通点所在的集合打上标签，就是该集合有几个感染源
                // 如果真的有连接并且不是感染点
                if (sick != i && !virus[i] && graph[sick][i] == 1) {
                    fn = find(i);
                    // 如果当前普通点所在的集合没有被感染，则该集合会被sick感染
                    if (infect[fn] == -1) {
                        infect[fn] = sick;
                    // 如果当前普通点所在的集合已经被感染了并且之前感染该集合的点还不是sick，则说明该集合会被多个感染点感染，已经没办法拯救了
                    // 如果已经被多个感染点感染的继续保持被多个感染点感染
                    } else if (infect[fn] >= 0 && infect[fn] != sick) {
                        infect[fn] = -2;
                    }
                }
            }
        }
        // 统计拯救数据
        for (int i = 0; i < n; i++) {
            // 只看集合的代表元素，并且该集合只被一个感染点感染
            if (i == find(i) && infect[i] >= 0) {
                cnt[infect[i]] += size[i];
            }
        }
        // 统计结果
        Arrays.sort(initial);
        int ans = initial[0];
        int max = cnt[initial[0]];
        for (int i : initial) {
            if (cnt[i] > max) {
                max = cnt[i];
                ans = i;
            }
        }
        return ans;
    }
}
